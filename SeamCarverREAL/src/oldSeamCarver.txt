import java.awt.Color;
import java.util.ArrayList;
import java.util.Comparator;

import javalib.impworld.World;
import javalib.impworld.WorldScene;
import javalib.worldimages.ComputedPixelImage;
import javalib.worldimages.FontStyle;
import javalib.worldimages.FromFileImage;
import javalib.worldimages.TextImage;
import javalib.worldimages.WorldImage;

// The abstract class that represents pixels in an image.
abstract class APixel {
  Color color;
  double brightness;
  Double energy;
  APixel up;
  APixel right;
  APixel down;
  APixel left;

  // constructor for BorderPixels
  APixel() {
    this.color = Color.black;
    this.brightness = this.calculateBrightness();
    this.energy = Double.MAX_VALUE;
    this.up = this;
    this.right = this;
    this.down = this;
    this.left = this;
  }

  // constructor for image pixel
  APixel(Color color) {
    this.color = color;
    this.brightness = this.calculateBrightness();
    this.energy = null;
    this.up = null;
    this.right = null;
    this.down = null;
    this.left = null;
  }

  // calculates the brightness of this APixel
  public double calculateBrightness() {
    return (this.color.getRed() + this.color.getGreen() + this.color.getBlue()) / 255.0;
  }

  // calculates the energy of this APixel
  public abstract double calculateEnergy();

  // EFFECT: updates this pixel's up, right, down, and left field
  public abstract void updateNeighbors(APixel up, APixel right, APixel down, APixel left);

  // EFFECT: updates this pixel's inwardPixel field with the given pixel
  public abstract void updateNeighbors(APixel inward);

  // EFFECT: updates the given ImagePixel's inwardPixel to this pixel
  // but ImagePixel doesn't have an inwardPixel so it does nothing
  public abstract void updateNeighborsImagePixel(ImagePixel outward);

  // EFFECT: updates the given BorderPixel's inwardPixel to this pixel
  public abstract void updateNeighborsBorderPixel(BorderPixel outward);

  // finds the following 3 next level neighbors from this pixel
  public abstract ArrayList<APixel> findVerticalLevelNeighbors();

  // EFFECT: reconnects the neighbors of this APixel to each other
  // based on the direction of the seam
  public abstract void removePixel();

  //
  public abstract void removePixelHelper();

  //
  public abstract void renderColumn(int x, int y, ComputedPixelImage image, String color);

  //
  public abstract void renderRow(int x, int y, ComputedPixelImage image, String color);

  //
  public abstract void createEnergiesColumn();

  //
  public abstract void createEnergiesRow();

  //
  public boolean wellFormedColumn() {
    return this.wellFormedRow() && this.down.wellFormedColumn();
  }

  //
  public abstract boolean wellFormedRow();

  //
  public void changeColor() {
    this.color = Color.red;
  }

  //
  public abstract void addToList(ArrayList<APixel> firstRow);

  //
  public abstract void removePixelHorizontal();

  public abstract ArrayList<APixel> findHorizontalLevelNeighbors();

  public abstract void addToListColumm(ArrayList<APixel> firstColumn);

  public abstract void removePixelHorizontalHelper();

}

// Represents the border pixel in an image, instantiated with the color black.
class BorderPixel extends APixel {
  ImagePixel inwardPixel;

  BorderPixel() {
    super();
    this.inwardPixel = null;
  }

  // called on the first row of the grid which is an arraylist of border pixels
  // and returns a list of neighbors of this pixel
  public ArrayList<APixel> findVerticalLevelNeighbors() {
    ArrayList<APixel> neighbors = new ArrayList<APixel>();
    neighbors.add(this.inwardPixel.left);
    neighbors.add(this.inwardPixel);
    neighbors.add(this.inwardPixel.right);
    return neighbors;
  }

  // EFFECT: updates this pixel's up, right, down, and left field
  // does nothing since border pixel's neighbors always point to itself
  public void updateNeighbors(APixel up, APixel right, APixel down, APixel left) {
    this.inwardPixel = this.inwardPixel;
  }

  // EFFECT: updates this pixel's inwardPixel field with the given pixel
  public void updateNeighbors(APixel inward) {
    inward.updateNeighborsBorderPixel(this);
  }

  // EFFECT: updates the given ImagePixel's inwardPixel to this pixel
  // but ImagePixel doesn't have an inwardPixel so it does nothing
  // does nothing since border pixel's neighbors always point to itself
  public void updateNeighborsImagePixel(ImagePixel outward) {
    this.inwardPixel = this.inwardPixel;
  }

  // EFFECT: updates the given BorderPixel's inwardPixel to this pixel
  // but inwardPixel is an ImagePixel so it does nothing
  // does nothing since border pixel's neighbors always point to itself
  public void updateNeighborsBorderPixel(BorderPixel outward) {
    this.inwardPixel = this.inwardPixel;
  }

  // returns the highest double value as the energy of a border pixel
  // such that it won't be included as a low value seam
  public double calculateEnergy() {
    return Double.MAX_VALUE;
  }

  // EFFECT: reconnects the neighbors of this APixel to each other based on
  // the direction of the seam
  // if the pixel removed in the inwardPixel (so vertical/straight removal)
  // the inwardPixel is not pointing at anything
  // else, the inwardPixel remains pointing at their inward
  public void removePixel() {
    this.inwardPixel = this.inwardPixel;
  }

  //
  public void removePixelHelper() {
    //
  }

  //
  public void renderColumn(int x, int y, ComputedPixelImage image, String color) {
    image = image;
  }

  //
  public void renderRow(int x, int y, ComputedPixelImage image, String color) {
    image = image;
  }

  //
  public void createEnergiesColumn() {
    this.energy = this.energy;
  }

  //
  public void createEnergiesRow() {
    this.energy = this.energy;
  }

  //
  public boolean wellFormedRow() {
    return true;
  }

  //
  public void addToList(ArrayList<APixel> firstRow) {

  }

  @Override
  public void removePixelHorizontal() {
    this.inwardPixel = this.inwardPixel;

  }

  @Override
  public ArrayList<APixel> findHorizontalLevelNeighbors() {
    // TODO Auto-generated method stub
    ArrayList<APixel> neighbors = new ArrayList<APixel>();
    neighbors.add(this.inwardPixel.up);
    neighbors.add(this.inwardPixel);
    neighbors.add(this.inwardPixel.down);
    return neighbors;
  }

  //
  public void addToListColumm(ArrayList<APixel> firstColumn) {

  }

  @Override
  public void removePixelHorizontalHelper() {
    // TODO Auto-generated method stub

  }

}

//represents a single pixel in a picture
class ImagePixel extends APixel {
  Double horizontalEnergy;
  Double verticalEnergy;

  ImagePixel(Color color) {
    super(color);
    this.horizontalEnergy = null;
    this.verticalEnergy = null;
    this.energy = null;
    this.up = null;
    this.right = null;
    this.down = null;
    this.left = null;
  }

  // EFFECT: reconnects the neighbors of THIS ImagePixel to each other
  // based on the direction of the seam
  public void removePixel() {

    this.left.right = this.right;
    this.right.left = this.left;

    this.up.down = this.right;
    this.down.up = this.right;

    this.right.removePixelHelper();
  }

  //
  public void removePixelHelper() {
    this.up.down = this.right;
    this.down.up = this.right;

    this.up = this.up.left;
    this.down = this.down.left;

    this.right.removePixelHelper();
  }

  // EFFECT: updates this pixel's up, right, down, and left field
  public void updateNeighbors(APixel up, APixel right, APixel down, APixel left) {
    this.up = up;
    this.right = right;
    this.down = down;
    this.left = left;
  }

  // EFFECT: updates this pixel's inwardPixel field with the given pixel
  public void updateNeighbors(APixel inward) {
    inward.updateNeighborsImagePixel(this);
  }

  // EFFECT: updates the given ImagePixel's inwardPixel to this ImagePixel pixel
  // but ImagePixel doesn't have an inwardPixel so it does nothing
  public void updateNeighborsImagePixel(ImagePixel outward) {
    this.up = this.up;
    this.right = this.right;
    this.down = this.down;
    this.left = this.left;
  }

  // EFFECT: updates the given BorderPixel's inwardPixel to this ImagePixel
  public void updateNeighborsBorderPixel(BorderPixel outward) {
    outward.inwardPixel = this;
  }

  // calculates the energy of this image pixel
  public double calculateEnergy() {
    return Math.sqrt(Math.pow(this.horizontalEnergy, 2) + Math.pow(this.verticalEnergy, 2));
  }

  // calculates the horizontal energy of this image pixel
  public double calculateHorizontalEnergy() {
    double a = this.up.left.calculateBrightness();
    double d = this.left.calculateBrightness();
    double g = this.down.left.calculateBrightness();
    double c = this.up.right.calculateBrightness();
    double f = this.right.calculateBrightness();
    double i = this.down.right.calculateBrightness();
    return ((a + d + g) - (c + f + i));
  }

  // calculates the vertical energy of this image pixel
  public double calculateVerticalEnergy() {
    double a = this.up.left.calculateBrightness();
    double b = this.up.calculateBrightness();
    double c = this.up.right.calculateBrightness();
    double g = this.down.left.calculateBrightness();
    double h = this.down.calculateBrightness();
    double i = this.down.right.calculateBrightness();
    return ((a + b + c) - (g + h + i));
  }

  // finds the following 3 next level neighbors from this image pixel
  public ArrayList<APixel> findVerticalLevelNeighbors() {
    ArrayList<APixel> threeVerticalNeighbors = new ArrayList<APixel>();
    threeVerticalNeighbors.add(this.down.left);
    threeVerticalNeighbors.add(this.down);
    threeVerticalNeighbors.add(this.down.right);
    return threeVerticalNeighbors;
  }

  //
  public void renderColumn(int x, int y, ComputedPixelImage image, String color) {
    this.renderRow(x, y, image, color);
    this.down.renderColumn(x, y + 1, image, color);
  }

  //
  public void renderRow(int x, int y, ComputedPixelImage image, String color) {
    if (color.equals("1")) {
      image.setColorAt(x, y, this.color);
    }
    else if (color.equals("2")) {
      int value = (int) (25.5 * this.energy);
      image.setColorAt(x, y, new Color(value, value, value));
    }
    this.right.renderRow(x + 1, y, image, color);
  }

  //
  public void createEnergiesColumn() {
    this.createEnergiesRow();
    this.down.createEnergiesColumn();
  }

  //
  public void createEnergiesRow() {
    this.horizontalEnergy = this.calculateHorizontalEnergy();
    this.verticalEnergy = this.calculateVerticalEnergy();
    this.energy = this.calculateEnergy();
    this.right.createEnergiesRow();
  }

  //
  public boolean wellFormedRow() {
    if (this.left.up != this.up.left) {
      throw new RuntimeException("Not well formed: left-up and up-left of this image pixel");
    }
    else if (this.right.up != this.up.right) {
      throw new RuntimeException("Not well formed: right-up and up-right of this image pixel");
    }
    else if (this.left.down != this.down.left) {
      throw new RuntimeException("Not well formed: left-down and down-left of this image pixel");
    }
    else if (this.right.down != this.down.right) {
      throw new RuntimeException("Not well formed: right-down and down-right of this image pixel");
    }
    else if (this != this.up.down) {
      throw new RuntimeException("Not well formed: up-down doesn't point to this image pixel");
    }
    else if (this != this.down.up) {
      throw new RuntimeException("Not well formed: down-up doesn't point to this image pixel");
    }
    else if (this != this.left.right) {
      throw new RuntimeException("Not well formed: left-right doesn't point to this image pixel");
    }
    else if (this != this.right.left) {
      throw new RuntimeException("Not well formed: right-left doesn't point to this image pixel");
    }
    else if (this.left == null) {
      throw new RuntimeException("Not well formed: this image pixel's left is null");
    }
    else if (this.right == null) {
      throw new RuntimeException("Not well formed: this image pixel's right is null");
    }
    else if (this.up == null) {
      throw new RuntimeException("Not well formed: this image pixel's up is null");
    }
    else if (this.down == null) {
      throw new RuntimeException("Not well formed: this image pixel's down is null");
    }
    else {
      return true && this.right.wellFormedRow();
    }
  }

  //
  public void addToList(ArrayList<APixel> firstRow) {
    firstRow.add(this);
    this.right.addToList(firstRow);
  }

  //
  public void removePixelHorizontal() {

    this.down.up = this.up;
    this.up.down = this.down;

    this.left.right = this.down;
    this.right.left = this.down;

    this.right.up = this.up;
    this.right.down = this.down;

    // this.down.removePixelHorizontalHelper();
  }

  //
  public void removePixelHorizontalHelper() {
    this.up = this.up.up;
    this.down = this.down;

    this.left = this.left.up;
    this.right = this.right.up;

    this.down.removePixelHorizontalHelper();
  }

  //
  public ArrayList<APixel> findHorizontalLevelNeighbors() {
    ArrayList<APixel> threeHorizontalNeighbors = new ArrayList<APixel>();
    threeHorizontalNeighbors.add(0, this.right.up); // represents the
    threeHorizontalNeighbors.add(1, this.right);
    threeHorizontalNeighbors.add(2, this.right.down);
    return threeHorizontalNeighbors;
  }

  //
  public void addToListColumm(ArrayList<APixel> firstColumn) {
    firstColumn.add(this);
    this.down.addToList(firstColumn);
  }

}

//represents a graph of pixels, which represent an image
class Graph {
  ArrayList<ArrayList<APixel>> grid = new ArrayList<ArrayList<APixel>>();
  SeamInfo lowestVerticalSeam;
  SeamInfo lowestHorizontalSeam;
  FromFileImage image;
  APixel start;

  Graph(String fileName) {
    this.lowestVerticalSeam = null;
    this.lowestHorizontalSeam = null;
    this.image = new FromFileImage(fileName);
    this.createGraph();
  }

  // EFFECT: sets grid to be a 2D ArrayList of APixels based on the given image
  void createPixels() {
    Color color;
    int height = (int) this.image.getHeight();
    int width = (int) this.image.getWidth();
    // iterates over each row of pixels in the image and creates the pixels for each
    // row
    for (int y = 0; y < height; y += 1) {
      ArrayList<APixel> currentRow = new ArrayList<APixel>();
      // adds border pixels above the first row of image pixels
      if (y == 0) {
        // iterates over each column in the row of pixels in the image and creates
        // border pixels
        // for each column
        for (int x = 0; x < width; x += 1) {
          currentRow.add(new BorderPixel());
        }
        this.grid.add(currentRow);
        currentRow = new ArrayList<APixel>();
      }
      // iterates over each column of pixels in the row of pixels and creates the
      // pixels/borders
      for (int x = 0; x < width; x += 1) {
        color = this.image.getColorAt(x, y);
        // adds border pixel at the start of the row
        if (x == 0) {
          currentRow.add(new BorderPixel());
        }
        currentRow.add(new ImagePixel(color));
        // adds border pixel at the end of the row
        if (x == (width - 1)) {
          currentRow.add(new BorderPixel());
        }
      }
      this.grid.add(currentRow);
      currentRow = new ArrayList<APixel>();
      // adds border pixels below the last row of image pixels
      if (y == (height - 1)) {
        // iterates over each column in the row of pixels in the image and creates
        // border pixels
        // for each column
        for (int x = 0; x < width; x += 1) {
          currentRow.add(new BorderPixel());
        }
        this.grid.add(currentRow);
      }
    }
  }

  // EFFECT: assigns energies to all of the pixels in grid
  void createEnergies() {
    this.start.createEnergiesColumn();
  }

  // EFFECT: sets up the neighbors/inward of the APixels in grid based on their
  // location in the array
  void createGraph() {

    // sets grid to be a 2D ArrayList of APixels based on the given image
    this.createPixels();

    // iterates over grid and creates the neighbors for the pixels in each row
    for (int y = 0; y < this.grid.size(); y += 1) {

      ArrayList<APixel> currentRow = this.grid.get(y);

      // top border
      if (y == 0) {
        // iterates over each pixel in the column and updates its neighbors
        for (int x = 0; x < currentRow.size(); x += 1) {
          currentRow.get(x).updateNeighbors(this.grid.get(y + 1).get(x + 1));
        }
      }
      // bottom border
      else if (y == (this.grid.size() - 1)) {
        // iterates over each pixel in the column and updates its neighbors
        for (int x = 0; x < currentRow.size(); x += 1) {
          currentRow.get(x).updateNeighbors(this.grid.get(y - 1).get(x + 1));
        }
      }
      else {
        // image pixels
        // iterates over the ArrayList at i in grid and creates the neighbors for the
        // pixels in
        // the list
        for (int x = 0; x < currentRow.size(); x += 1) {
          // left border
          if (x == 0) {
            currentRow.get(x).updateNeighbors(currentRow.get(x + 1));
          }
          // right border
          else if (x == (this.grid.get(y).size() - 1)) {
            currentRow.get(x).updateNeighbors(currentRow.get(x - 1));
          }
          else {
            // image pixels
            APixel top;
            APixel right = currentRow.get(x + 1);
            APixel bottom;
            APixel left = currentRow.get(x - 1);
            if ((y - 1) == 0) {
              top = this.grid.get(y - 1).get(x - 1);
            }
            else {
              top = this.grid.get(y - 1).get(x);
            }
            if ((y + 1) == (this.grid.size() - 1)) {
              bottom = this.grid.get(y + 1).get(x - 1);
            }
            else {
              bottom = this.grid.get(y + 1).get(x);
            }
            currentRow.get(x).updateNeighbors(top, right, bottom, left);
          }
        }
      }
    }

    // assigns a start pixel to the start field
    this.start = this.grid.get(1).get(1);

    // assigns energies to all of the pixels in grid
    this.createEnergies();

    // this.findLowestVerticalSeam();

    // this.findLowestHorizontalSeam();
  }

  // EFFECT: determines if this graph is well formed and throws exceptions if it's
  // not
  boolean wellFormed() {
    return this.start.wellFormedColumn();
  }

  // returns the SeamInfo with the smallest weight out of all the small seam infos
  // from the list, using a comparator that compares their totalWeights that
  // should have been accumulated
  void findLowestVerticalSeam() {
    ArrayList<SeamInfo> seamInfoOfBottom = this.findLowestVerticalSeamHelper();

    // find the lowest totalWeight seamInfo from the last row
    SeamInfo lowestSeamInfo = seamInfoOfBottom.get(0);
    for (int i = 1; i < seamInfoOfBottom.size(); i++) {
      if (seamInfoOfBottom.get(i).totalWeight < lowestSeamInfo.totalWeight) {
        lowestSeamInfo = seamInfoOfBottom.get(i);
      }
    }
    this.lowestVerticalSeam = lowestSeamInfo;
  }

  // creates an arraylist of the lowest seamInfos in this graph
  ArrayList<SeamInfo> findLowestVerticalSeamHelper() {
    int height = (int) this.image.getHeight();
    int width = (int) this.image.getWidth();

    ArrayList<APixel> firstRow = new ArrayList<>();
    this.start.addToList(firstRow);

    ArrayList<SeamInfo> seamInfoOfFirstRow = new ArrayList<SeamInfo>();
    for (APixel p : firstRow) {
      seamInfoOfFirstRow.add(new SeamInfo(p));
    }

    // iterate through the remaining rows, finding the lowest weight seam for
    // each
    // pixel, skipping first and last row
    for (int i = 0; i < (height); i++) {
      ArrayList<SeamInfo> seamInfoOfRow = new ArrayList<SeamInfo>();

      // iterates through the row of pixels, skipping first and last pixel
      // starting at current pixel
      for (int a = 0; a < width; a++) {
        SeamInfo lowestSeamInfo = seamInfoOfFirstRow.get(a).findNextVerticalSeamInfo();
        // iterates through the seam info of adjacent pixels
        for (int x = a - 1; x <= (a + 1); x++) {
          // check if index is within bounds
          if ((x >= 0) && (x < seamInfoOfFirstRow.size())) {
            SeamInfo nextSeamInfo = seamInfoOfFirstRow.get(x).findNextVerticalSeamInfo();
            if (nextSeamInfo.totalWeight < lowestSeamInfo.totalWeight) {
              lowestSeamInfo = nextSeamInfo;
            }
          }
        }
        seamInfoOfRow.add(lowestSeamInfo);
      }
      seamInfoOfFirstRow = seamInfoOfRow;
    }
    return seamInfoOfFirstRow;
  }

  // EFFECT: removes the lowestVerticalSeam from grid
  void removeVerticalSeam() {
    this.lowestVerticalSeam.verticalSeamRemoval();
  }

  // renders this graph into an image
  WorldImage render(String color) {
    ComputedPixelImage result = new ComputedPixelImage((int) this.image.getWidth(),
        (int) this.image.getHeight());
    this.start.renderColumn(0, 0, result, color);
    return result;
  }

  //
  public WorldScene lastScene() {
    WorldScene scene = new WorldScene(500, 500);
    scene.placeImageXY(new TextImage("End", 24, FontStyle.BOLD, Color.black), 250, 250);
    return scene;
  }

  //
  boolean shouldEnd() {
    if ((this.image.getHeight() == 0) && (this.image.getWidth() == 0)) {
      return true;
    }
    else {
      return false;
    }
  }

  // returns the SeamInfo with the smallest weight out of all the small seam infos
  // from the list, using a comparator that compares their totalWeights that
  // should have been accumulated
  void findLowestHorizontalSeam() {
    ArrayList<SeamInfo> seamInfoOfRightMost = this.findLowestHorizontalSeamHelper();

    // find the lowest totalWeight seamInfo from the last row
    SeamInfo lowestSeamInfo = seamInfoOfRightMost.get(0);
    for (int i = 1; i < seamInfoOfRightMost.size(); i++) {
      if (seamInfoOfRightMost.get(i).totalWeight < lowestSeamInfo.totalWeight) {
        lowestSeamInfo = seamInfoOfRightMost.get(i);
      }
    }
    this.lowestHorizontalSeam = lowestSeamInfo;

  }

  // creates an arraylist of the lowest seamInfos in this graph horizontally
  ArrayList<SeamInfo> findLowestHorizontalSeamHelper() {
//    int height = (int) this.image.getHeight();
//    int width = (int) this.image.getWidth();
//
//    ArrayList<APixel> firstColumn = new ArrayList<>();
//    this.start.addToListColumm(firstColumn);
//
//    for (APixel p : firstColumn) {
//      
//    }
    int height = (int) this.image.getHeight();
    int width = (int) this.image.getWidth();

    ArrayList<APixel> firstColumn = new ArrayList<>();
    this.start.addToListColumm(firstColumn);

    ArrayList<SeamInfo> seamInfoOfFirstColumn = new ArrayList<SeamInfo>();
    for (APixel p : firstColumn) {
      seamInfoOfFirstColumn.add(new SeamInfo(p));
    }

    // iterate through the remaining rows, finding the lowest weight seam for
    // each
    // pixel, skipping first and last row
    for (int i = 0; i < (width); i++) {
      ArrayList<SeamInfo> seamInfoOfRow = new ArrayList<SeamInfo>();

      // iterates through the row of pixels, skipping first and last pixel
      // starting at current pixel
      for (int a = 0; a < height; a++) {
        SeamInfo lowestSeamInfo = seamInfoOfFirstColumn.get(a).findNextHorizontalSeamInfo();
        // iterates through the seam info of adjacent pixels
        for (int x = a - 1; x <= (a + 1); x++) {
          // check if index is within bounds
          if ((x >= 0) && (x < seamInfoOfFirstColumn.size())) {
            SeamInfo nextSeamInfo = seamInfoOfFirstColumn.get(x).findNextHorizontalSeamInfo();
            if (nextSeamInfo.totalWeight < lowestSeamInfo.totalWeight) {
              lowestSeamInfo = nextSeamInfo;
            }
          }
        }
        seamInfoOfRow.add(lowestSeamInfo);
      }
      seamInfoOfFirstColumn = seamInfoOfRow;
    }
    return seamInfoOfFirstColumn;
  }

  void removeHorizontalSeam() {
    this.lowestHorizontalSeam.horizontalSeamRemoval();
  }

}

//represents the information of an accumulating seam in a picture
class SeamInfo {
  APixel pixel;
  double totalWeight;
  SeamInfo cameFrom;

  SeamInfo(APixel pixel, double totalWeight, SeamInfo cameFrom) {
    this.pixel = pixel;
    this.totalWeight = totalWeight;
    this.cameFrom = cameFrom;
  }

  SeamInfo(APixel pixel) {
    this.pixel = pixel;
    this.totalWeight = 0;
    this.cameFrom = null;
  }

  // creates a new SeamInfo, adding on to the information with the new pixel in
  // the seam
  SeamInfo findNextVerticalSeamInfo() {
    APixel nextPixel = this.findNextVertical3PixelsEnergy();
    double nextTotalWeight = this.totalWeight + nextPixel.calculateEnergy();
    return new SeamInfo(nextPixel, nextTotalWeight, this);
  }

  // finds the next pixel with the lowest amount of energy from the given pixel
  APixel findNextVertical3PixelsEnergy() {
    ArrayList<APixel> threeVerticalNeighbors = this.pixel.findVerticalLevelNeighbors();

    if (!(threeVerticalNeighbors.isEmpty())) {
      APixel leftMostPixel = threeVerticalNeighbors.get(0);
      APixel middlePixel = threeVerticalNeighbors.get(1);
      APixel rightMostPixel = threeVerticalNeighbors.get(2);

      if (new CompareEnergyValues().compare(leftMostPixel, middlePixel) <= 0) {
        if (new CompareEnergyValues().compare(leftMostPixel, rightMostPixel) <= 0) {
          return leftMostPixel;
        }
        else {
          return rightMostPixel;
        }
      }
      else if (new CompareEnergyValues().compare(middlePixel, rightMostPixel) <= 0) {
        return middlePixel;
      }
      else {
        return rightMostPixel;
      }
    }
    return this.pixel;
  }

  // EFFECT:
  // set this pixel's neighbors to each other first
  // removes the lowestTotalWeight seam found, from the the graph, and reconnects
  // the remaining pixels to one another correctly
  // goes from bottom up
  // will concurrently update the 2d array in Graph by also removing each pixel
  void verticalSeamRemoval() {
    if (this.cameFrom != null) {
      this.pixel.removePixel();
      this.cameFrom.verticalSeamRemoval();
    }
  }

  // creates a new SeamInfo, adding on to the information with the new pixel in
  // the seam
  SeamInfo findNextHorizontalSeamInfo() {
    APixel nextPixel = this.findNextHorizontal3PixelsEnergy();
    double nextTotalWeight = this.totalWeight + nextPixel.calculateEnergy();
    return new SeamInfo(nextPixel, nextTotalWeight, this);
  }

  // finds the next pixel with the lowest amount of energy from the given pixel
  APixel findNextHorizontal3PixelsEnergy() {
    ArrayList<APixel> threeHorizontalNeighbors = this.pixel.findHorizontalLevelNeighbors();

    if (!(threeHorizontalNeighbors.isEmpty())) {
      APixel topMostPixel = threeHorizontalNeighbors.get(0);
      APixel middlePixel = threeHorizontalNeighbors.get(1);
      APixel bottomMostPixel = threeHorizontalNeighbors.get(2);

      if (new CompareEnergyValues().compare(bottomMostPixel, middlePixel) <= 0) {
        if (new CompareEnergyValues().compare(bottomMostPixel, topMostPixel) <= 0) {
          return bottomMostPixel;
        }
        else {
          return topMostPixel;
        }
      }
      else if (new CompareEnergyValues().compare(middlePixel, topMostPixel) <= 0) {
        return middlePixel;
      }
      else {
        return topMostPixel;
      }
    }
    return this.pixel;
  }

  //
  public void horizontalSeamRemoval() {
    if (this != null) {
      this.pixel.removePixelHorizontal();
      this.cameFrom.horizontalSeamRemoval();
    }

  }
}

// a comparator that compares the energy of two pixels
class CompareEnergyValues implements Comparator<APixel> {

  // returns an int representing which energy is greater
  public int compare(APixel p1, APixel p2) {
    if (p1 == null) {
      return 1;
    }

    else if (p2 == null) {
      return -1;
    }

    double energyDiff = p1.calculateEnergy() - p2.calculateEnergy();
    if (energyDiff > 0) {
      return 1;
    }
    else if (energyDiff < 0) {
      return -1;
    }
    else {
      return 0;
    }
  }
}

// represents a world where a SeamCarver exists
class SeamCarver extends World {
  Graph graph;
  // represents whether the SeamCarver is paused or not
  boolean pause;
  // represents which seam gets removed
  String seam;
  // represents a color state where 1 is the actual image, 2 is the energies,
  // and 3 is the cumulative weight of each seam
  String color;
  boolean stop;
  int count;

  SeamCarver(Graph graph) {
    this.graph = graph;
    this.pause = false;
    ArrayList<String> seamOptions = new ArrayList<>();
    seamOptions.add("v");
    seamOptions.add("h");
    this.seam = "v";
    // this.seam = seamOptions.get((int) (Math.random() * 2));
    this.color = "1";
    this.stop = false;
    this.count = 0;
  }

  public void onKeyEvent(String key) {
    if (key.equals(" ")) {
      this.pause = true;
    }
    else if (key.equals("v")) {
      this.seam = "v";
      this.graph.findLowestVerticalSeam();
      // this.graph.findLowestHorizontalSeam();
      this.carve();
    }
    else if (key.equals("h")) {
      this.graph.findLowestVerticalSeam();
      this.graph.findLowestHorizontalSeam();
      this.seam = "h";
      this.carve();
    }
    else if (key.equals("1")) {
      this.color = "1";
    }
    else if (key.equals("2")) {
      this.color = "2";
    }
    else if (key.equals("3")) {
      this.color = "3";
    }
    else if (key.equals("escape")) {
      this.stop = true;
    }
  }

  // produces a WorldScene with the grid rendered
  public WorldScene makeScene() {
    WorldScene canvas = new WorldScene(500, 500);
    canvas.placeImageXY(this.graph.render(this.color), 250, 250);
    return canvas;
  }

  public WorldScene lastScene(String msg) {
    return this.graph.lastScene();
  }

  public void carve() {

    if (this.seam.equals("v")) {
      this.graph.removeVerticalSeam();

    }
    else if (this.seam.equals("h")) {
      this.graph.removeHorizontalSeam();
    }
  }

  public boolean shouldWorldEnd() {
    return this.graph.shouldEnd() || this.stop;
  }

  // EFFECT: removes the lowest energy vertical seam each tick
//  public void onTick() {
//
//    if (this.pause) {
//    }
//    else if (this.count == 0) {
//      System.out.println("ah1");
//      this.graph.findLowestVerticalSeam();
//      this.count = 1;
//    }
//    else if (this.count == 1) {
//      System.out.println("ah0");
//      this.carve();
//      this.count = 0;
//    }
//  }
}
